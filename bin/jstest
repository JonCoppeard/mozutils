#!/usr/bin/env python3

# jstest: Run SpiderMonkey tests

import os
import os.path
import sys
import shutil
import argparse
import subprocess
import glob
import multiprocessing

# Import common functions
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))
from mozutils import *
from mozconfig import *

parser = argparse.ArgumentParser(description = 'Run SpiderMonkey tests')

parser.add_argument('-B', '--no-build', action='store_false', dest='build', default=True,
                    help = 'Don\'t build before running tests')

add_build_arguments(parser)
add_config_arguments(parser)

parser.add_argument('-z', '--gczeal', type=int, help = 'GC zeal mode')
parser.add_argument('-t', '--tbpl', action='store_true', help = 'Run TBPL tests')

parser.add_argument('-y', '--stylecheck', action='store_true', help = 'Run style check')
parser.add_argument('-a', '--jsapitest', action='store_true', help = 'Run jsapi tests')
parser.add_argument('-j', '--jittest', action='store_true', help = 'Run jit tests')
parser.add_argument('-s', '--jstest', action='store_true', help = 'Run js tests')
parser.add_argument('-b', '--octane', action='store_true', help = 'Run octane benchmark')

args = parser.parse_args()

enter_dirs(args.dirs)

if args.remote:
    sys.exit(run_remote_command(args))

def run_test(build_name, test_name, command):
    println("Run %s %s tests" % (build_name, test_name))
    rc = subprocess.call(command, shell = True)
    if rc != 0:
        sys.exit("Test failed")
    println('')

chdir_to_source_root()

os.environ['TIMEZONE'] = 'PST'
os.environ['LOCALE'] = 'en_US.utf8'
if args.gczeal:
    os.environ['JS_GC_ZEAL'] = str(args.gczeal)

testOptions = '--tbpl' if args.tbpl else ''
test_all = not any([args.jsapitest, args.jittest, args.jstest, args.octane, args.stylecheck])

config_names, _ = get_configs_from_args(args)
build_name = get_build_name(config_names) + '-shell'
build_dir = build_name + '-build'
build_config = "mozconfig-" + build_name

bin_dir = os.path.join(build_dir, 'dist', 'bin')
obj_dir = os.path.join(build_dir, 'js', 'src')

try:
    if args.build:
        js_build(args)

    if (args.stylecheck) and os.path.exists("../../.hg"):
        println("Run %s style check" % build_name)
        run_command(['make', '-C', obj_dir, 'check-style'], False, False)
        run_command(['make', '-C', obj_dir, 'check-masm'], False, False)
        println('')

    if args.jsapitest or test_all:
        println("Run %s jsapi tests" % build_name)
        run_command(os.path.join(bin_dir, 'jsapi-tests'), False, False)
        println('')

    shell = os.path.abspath(os.path.join(bin_dir, 'js'))
    os.chdir('js/src')

    if args.jittest or test_all:
        run_test(build_name, 'jit',
                 'jit-test/jit_test.py %s %s' % (testOptions, shell))

    if args.jstest or test_all:
        run_test(build_name, 'js',
                 'tests/jstests.py %s %s /' % (testOptions, shell))

    if args.octane:
        os.chdir('octane')
        run_test(build_name, 'octane', shell + ' run.js')
        os.chdir('..')
except KeyboardInterrupt:
    println('')
    println('Interrupted')
    sys.exit(1)
