#!/usr/bin/env python3

import argparse
import fileinput

parser = argparse.ArgumentParser(
    description = 'Sort objdump disassembly output to aid comparison')
parser.add_argument('--filter-gc', action='store_true',
                    help='Include only GC relevant functions')
parser.add_argument('files', metavar='FILE', nargs='*')
args = parser.parse_args();

GCFilters = ["js::gc::", "mark", "trace"]

def isGCRelated(section_name):
    for filter in GCFilters:
        if filter in section_name:
            return True
    return False

def sectionKey(section):
    words = section[0].split()
    while '(' not in words[0] and '>' not in words[0]:
        words.pop(0)
        if not words:
            return section[0]
    return ' '.join(words)

section = None
sections = []

for line in fileinput.input(args.files):
    line = line.rstrip()

    if line == "":
        section = None
        continue

    if section is None:
        section = []
        sections.append(section)

    section.append(line)

# Sort sections by function name and args, ignoring address and return type.
sections.sort(key = sectionKey)

for section in sections:
    if args.filter_gc and not isGCRelated(section[0].lower()):
        continue

    for line in section:
        print(line)
    print()
