#!/usr/bin/env python3

import argparse
import fileinput
import re
import sys

parser = argparse.ArgumentParser(
    description = 'Sort objdump disassembly output to aid comparison')
parser.add_argument('--filter-gc', action='store_true',
                    help='Include only GC relevant functions')
parser.add_argument('files', metavar='FILE', nargs='*')
args = parser.parse_args();

GCFilters = ["js::gc::", "mark", "trace", "sweep", "arena", "finalize"]

def isGCRelated(first_line):
    first_line = first_line.lower()
    for filter in GCFilters:
        if filter in first_line:
            return True
    return False

def sectionKey(section):
    first_line = section[0]
    words = first_line.split()
    if words and re.match(r"[0-9a-f]+", words[0], re.IGNORECASE):
        words.pop(0)
    while words and "(" not in words[0] and "<" not in words[0][1:]:
        words.pop(0)
    if not words:
        return first_line
    result = ' '.join(words)
    if result.startswith("<"):
        result = result[1:]
    return result

section = None
sections = []

for line in fileinput.input(args.files):
    line = line.rstrip()

    if line == "":
        section = None
        continue

    if line.startswith("Disassembly of section"):
        continue

    if section is None:
        section = []
        sections.append(section)

    section.append(line)

if args.filter_gc:
    sections = list(filter(lambda section: isGCRelated(section[0]), sections))

# Sort sections by function name and args, ignoring address and return type.
sections.sort(key = sectionKey)

for section in sections:
    #print(section[0], file=sys.stderr)
    #print("  " + sectionKey(section), file=sys.stderr)

    for line in section:
        print(line)
    print()
