#!/usr/bin/env python3

# Find out when bugs landed on mozilla-central
# todo: Parse backout information?
# todo: work out which nightly build they were in

TargetRepo = "https://hg.mozilla.org/mozilla-central"
BugzillaAPI = "https://bugzilla.mozilla.org/rest"

import argparse
from datetime import datetime
import io
import json
import os
import sys
import re
import subprocess
import urllib.request

parser = argparse.ArgumentParser(description = 'Find when changes landed on mozilla-central')
parser.add_argument('-l', '--limit', type=int, default=20,
                    help='Number of changesets to look at')
parser.add_argument('-r', '--rev',
                    help='Revision or revset to query')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='Produce verbose output')
parser.add_argument('path', nargs='?', default='.',
                    help='Path of files to check')
args = parser.parse_args()

if not os.path.exists(args.path):
    sys.exit("Path not found: " + args.path)

BugData = {}
def fetchBugData(bug_id):
    if bug_id in BugData:
        return BugData[bug_id]

    url = "%s/bug/%s/comment?include_fields=text,creation_time" % (BugzillaAPI, bug_id)
    try:
        contents = urllib.request.urlopen(url).read()
    except urllib.error.HTTPError as error:
        if error.code == 401:
            return None
        raise

    bug_data = json.loads(contents)
    BugData[bug_id] = bug_data
    return bug_data

def findLandingTime(node, bug_id):
    bug_data = fetchBugData(bug_id)
    if not bug_data:
        return "(hidden)"

    comments = bug_data['bugs'][bug_id]['comments']

    for comment in comments:
        text = comment['text']
        if TargetRepo in text and node[:12] in text:
            time = datetime.strptime(comment['creation_time'], "%Y-%m-%dT%H:%M:%SZ")
            return time.strftime("%Y-%m-%d %H:%M")

    return "(not found)"

print("Change:      Landed on:       Description:")

try:
    command = ['hg', 'log',
               '--template', '{node} {phase} {firstline(desc)}\n',
               '--limit', str(args.limit),
               args.path]
    if args.rev:
        command.extend(['--rev', args.rev])

    proc = subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
    for line in io.TextIOWrapper(proc.stdout, encoding="utf-8"):
        match = re.match(r'(\w+) (\w+) (.*)', line.rstrip())
        if not match:
            sys.exit("Can't parse hg log output: " + line)

        node, phase, desc = match.group(1), match.group(2), match.group(3)
        if args.verbose:
            print("(log %s %s %s)" % (node, phase, desc))

        if phase != 'public':
            continue

        match = re.match(r'Bug (\d+)', desc, re.IGNORECASE)
        if not match:
            result = "(skipped)"
        else:
            bug_id = match.group(1)
            result = findLandingTime(node, bug_id)

        print("%s %16s %s" % (node[:12], result, desc[:75]))

except KeyboardInterrupt:
    sys.exit(1)
