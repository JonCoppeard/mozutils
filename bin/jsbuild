#!/usr/bin/env python

# jsbuild: Build SpiderMonkey

import argparse
import glob
import multiprocessing
import os
import os.path
import platform
import shutil
import subprocess
import sys
import time

# Import common functions
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))
from mozutils import *
from jsconfigs import *

parser = argparse.ArgumentParser(description = 'Build SpiderMonkey')
parser.add_argument('-o', '--opt', action='store_true', help = 'Optimized build')
parser.add_argument('-d', '--optdebug', action='store_true', help = 'Optimized debug build')
parser.add_argument('-c', '--clean', action='store_true', help = 'Clean build')
parser.add_argument('-C', '--no-clean', action='store_false', dest = 'clean')
parser.add_argument('-W', '--no-warnings', action='store_false', dest='warnings', default=True,
                    help = 'Hide warnings')
parser.add_argument('-v', '--verbose', action='store_true', help = 'Show all build output')
parser.add_argument('-n', '--dry-run', action='store_true', help = 'Dry run, check arguments but don\'t build')
parser.add_argument('-S', '--no-sync', action='store_false', dest='sync', default=True,
                    help = 'Don\'t sync cloned branch')
parser.add_argument('configs', nargs = '*', choices = config_names + ['default'], default = 'default',
                    help = 'Build configurations to use')
args = parser.parse_args()

configs = get_configs_from_args(args)
name = get_build_name(configs)
dir = name + '-build'

chdir_to_source_root()

if args.dry_run:
    sys.exit(0)

if os.path.isfile('.cloned-from') and args.sync:
    subprocess.check_call(os.path.join(os.path.dirname(__file__), 'pullBranch'))

os.chdir("js/src")

if not os.path.isfile('configure') or os.path.getmtime('configure.in') > os.path.getmtime('configure'):
    print('Autoconf')
    autoconf = which('autoconf213') or which('autoconf2.13')
    if not autoconf:
        exit_fatal('Can\'t find autoconf 2.13')
    subprocess.check_call(autoconf)

    print('Clean all')
    args.clean = False
    for build in glob.glob('*-build'):
        if os.path.isdir(build):
            shutil.rmtree(build)

if args.clean and os.path.exists(dir):
    print('Clean ' + name)
    print("  Cleaning will commence in 5 seconds!  Interrupt now to preserve the build")
    time.sleep(5);  # so I can hit ^C after I accidentally do this
    if os.path.isdir(dir):
        shutil.rmtree(dir)

if not os.path.isdir(dir):
    print('Configure ' + name)
    os.mkdir(dir)
    os.chdir(dir)

    opts = common_options
    for config in configs:
        opts += ' ' + config_options[config]
        if config in config_compiler_exes:
            c_exe, cpp_exe = config_compiler_exes[config]
            os.environ['CC'] = ensureExe(c_exe)
            os.environ['CXX'] = ensureExe(cpp_exe)
        if config in config_env_vars:
            env_vars = config_env_vars[config]
            for var in env_vars:
                os.environ[var] = env_vars[var]

    if args.verbose:
        print('configure ' + opts)
    run_command('../configure ' + opts, args.verbose, args.warnings)
    os.chdir('..')

print('Build ' + name)
os.chdir(dir)
run_command('nice make -j%d' % multiprocessing.cpu_count(),
            args.verbose, args.warnings)
if not os.path.lexists('shell'):
    os.symlink('dist/bin/js', 'shell')
if not os.path.lexists('jsapi-tests'):
    os.symlink('js/src/jsapi-tests/jsapi-tests', 'jsapi-tests')
if platform.system() == 'Darwin' and not os.path.lexists('libmozglue.dylib'):
    os.symlink('mozglue/build/libmozglue.dylib', 'libmozglue.dylib')
