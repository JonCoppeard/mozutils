#!/usr/bin/env python3

# Run benchmarks for two builds and compare interactively.

import argparse
import math
import os
import os.path
import re
import signal
import subprocess
import sys
import tempfile

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))

import display
from format import *
from stats import *
import gcprofile

def main():
    args = parseArgs()

    builds = list(map(Build, args.builds))

    iterations = 20

    allTests = [
        # Run all tests sequentially in a single runtime.
        OctaneTest('octane', 'run.js'),

        # Run individual tests independently.
        OctaneTest('richards'),
        OctaneTest('deltablue'),
        OctaneTest('crypto'),
        OctaneTest('raytrace'),
        OctaneTest('earley-boyer'),
        OctaneTest('regexp'),
        OctaneTest('splay'),
        OctaneTest('navier-stokes'),
        OctaneTest('pdfjs'),
        OctaneTest('mandreel'),
        OctaneTest('gbemu'),
        OctaneTest('code-load'),
        OctaneTest('box2d'),
        OctaneTest('zlib'),
        OctaneTest('typescript')
    ]

    tests = [allTests[0]]
    if args.test:
        tests = list(filter(lambda t: t.name == args.test, allTests))
        if not tests:
            sys.exit(f"Test '{args.test}' not found")

    scores = []

    results = dict()

    out = display.Terminal()

    printHeader()
    displayResults(out, builds, scores, results, args.show_samples)

    for i in range(iterations):
        for build in builds:
            for test in tests:
                result = runBenchmark(build, test, args)
                for score in result.keys():
                    if score not in results:
                        addScore(builds, scores, results, score)
                    results[score][build].append(result[score])
                with DelayedKeyboardInterrupt():
                    displayResults(out, builds, scores, results, args)

class Build:
    def __init__(self, spec):
        command = spec.split()
        path = command[0]
        shell = os.path.join(path, "shell")
        ensure(canExecute(shell), f"Executeable shell not found at: {shell}")
        self.spec = spec
        self.path = os.path.normpath(path)
        self.name = os.path.basename(self.path)
        self.shell = os.path.abspath(shell)
        self.args = command[1:]

    def __repr__(self):
        return f"Build({self.name})"

class Test:
    def __init__(self, name, dir, script):
        self.name = name
        self.dir = dir
        self.script = script

class OctaneTest(Test):
    def __init__(self, name, script=None):
        if not script:
            script = f"run-{name}.js"
        super().__init__(name, 'octane', script)

class DelayedKeyboardInterrupt(object):
    # From https://stackoverflow.com/a/21919644
    def __enter__(self):
        self.signal_received = False
        self.old_handler = signal.signal(signal.SIGINT, self.handler)

    def handler(self, sig, frame):
        self.signal_received = (sig, frame)

    def __exit__(self, type, value, traceback):
        signal.signal(signal.SIGINT, self.old_handler)
        if self.signal_received:
            self.old_handler(*self.signal_received)

def ensure(condition, error):
    if not condition:
        sys.exit(error)

def canExecute(path):
    return os.path.isfile(path) and os.access(path, os.X_OK)

def parseArgs():
    parser = argparse.ArgumentParser(description = 'Benchmark SpiderMonkey')
    parser.add_argument('-t', '--test', help='Test suite to run')
    parser.add_argument('--show-samples', action='store_true')
    parser.add_argument('--gc-profile', action='store_true')
    parser.add_argument('--sys-usage', action='store_true')
    parser.add_argument('builds', nargs="+")
    return parser.parse_args()

def runBenchmark(build, test, args):
    oldcwd = os.getcwd()
    os.chdir(test.dir)
    cmd = [build.shell] + build.args + [test.script]
    env = dict()

    profilePath = None
    if args.gc_profile:
        temp = tempfile.NamedTemporaryFile(delete=False)
        temp.close()
        profilePath = temp.name
        env['JS_GC_PROFILE'] = '1'  # Ignore trivial slices for now
        env['JS_GC_PROFILE_NURSERY'] = '0'
        env['JS_GC_PROFILE_FILE'] = profilePath

    if args.sys_usage:
        cmd = ['/usr/bin/time', '-v'] + cmd

    proc = subprocess.run(cmd, env=env, capture_output=True, text=True)
    if proc.returncode != 0:
        print(f"Error running benchmark {test.name} with shell {build.shell}:")
        print(' '.join(cmd))
        print(proc.stderr)
        sys.exit(1)
    os.chdir(oldcwd)

    return parseOutput(proc.stdout, proc.stderr, args, profilePath)

def addScore(builds, scores, results, score):
    assert score not in results
    assert score not in scores

    scores.append(score)

    results[score] = dict()
    for build in builds:
        results[score][build] = []

def parseOutput(stdout, stderr, args, profilePath):
    result = dict()
    for line in stdout.splitlines():
        match = re.match(r'(\w+):\s(\d+)', line)
        if match:
            key, value = match.group(1), match.group(2)
            result['!' + key] = int(value)

    if profilePath:
        with open(profilePath) as f:
            gcprofile.summariseProfile(f.read(), result, False)
        os.remove(profilePath)

    if args.sys_usage:
        parseSysUsage(result, stderr)

    if not result:
        print(text)
        sys.exit("Can't parse output")

    return result

def parseSysUsage(result, text):
    for line in text.splitlines():
        match = re.match(r'\s+([^:]+):\s([\d\.]+)', line)
        if not match:
            continue

        key, value = match.group(1), match.group(2)
        if '(kbytes)' in key:
            value = int(value)
        else:
            continue

        result[key] = value

def printHeader():
    header = (24 * " ") + statsHeader()
    print(header)
    print(len(header) * "=")

def displayResults(out, builds, scores, results, args):
    out.clear()

    count = 0
    geomean = dict()
    for build in builds:
        geomean[build] = 0

    for score in scores:
        statsForBuild = dict()
        compareTo = None
        low = None
        high = None
        first = True
        for build in builds:
            data = results[score][build]
            if data:
                stats = Stats(data)
                statsForBuild[build] = stats
                if score.startswith('!') and stats.mean != 0:
                    geomean[build] += math.log(stats.mean)
                if first:
                    compareTo = stats
                    low, high = stats.min, stats.max
                    first = False
                else:
                    low, high = min(low, stats.min), max(high, stats.max)

        if low == 0 and high == 0:
            continue

        if score.startswith('!'):
            score = score[1:]
            count += 1

        out.print(f"{score}:")
        for build in builds:
            text = ""
            samples = ""
            if build in statsForBuild:
                stats = statsForBuild[build]
                comp = compareStats(stats, compareTo)
                text = formatStats(stats, comp)

                if low != high and stats.count > 1:
                    text += "   " + formatBox(low, high, stats)
                    if args.show_samples:
                        samples = formatSamples(low, high, stats)

            out.print("  %20s  %s" % (build.spec[-20:], text))
            if args.show_samples:
                out.print((76 * ' ') + samples)

    if count > 1 and not args.gc_profile:
        out.print()
        out.print("Geometric mean:")
        compareTo = None
        first = True
        for build in builds:
            if geomean[build] != 0:
                mean = math.exp(geomean[build] / count)
                text = "          %8.1f" % mean
                if first:
                    compareTo = mean
                    first = False
                else:
                    diff = (mean - compareTo) / compareTo
                    text += "                         %4.1f%%" % (diff * 100)
                out.print("  %20s  %s" % (build.spec[-20:], text))

try:
    main()
except KeyboardInterrupt:
    pass
