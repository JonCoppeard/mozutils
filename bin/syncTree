#!/usr/bin/env python3

# Sync a tree from a remote one by fetching a diff of outgoing changes
# and applying it locally.

# todo:
#  - hg outgoing exits with return code 1 if no changes
#  - parallelise branch prep and fetching diff
#  - record list of changed files to speed up prep
#  - warn if update from upstream needed

import argparse
import json
import os
import re
import subprocess
import sys
import tempfile

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))
from mozutils import *

parser = argparse.ArgumentParser(description = 'Sync with remote tree')
parser.add_argument('-c', '--set-client', action='store_true',
                    help="Initialise the current tree as a syncTree client")
parser.add_argument('--print-changes', metavar="TREE",
                    help="Print outgoing changes as a diff (used internally on server)")
args = parser.parse_args()

def print_changes():
    changeset = get_first_outgoing_changeset()
    changeset = get_parent_changeset(changeset)
    diff = diff_against_changeset(changeset)
    response = [changeset, diff]
    print(json.dumps(response), flush=True)

def get_first_outgoing_changeset():
    stdout = run_or_exit('hg outgoing --template "{node}\n" --quiet')
    changeset = stdout.splitlines()[0].strip()
    assert re.match(r'[0-9a-z]+$', changeset)
    return changeset

def get_parent_changeset(changeset):
    stdout = run_or_exit(f'hg log -r {changeset}^ --template "{{node}}\n"')
    changeset = stdout.splitlines()[0].strip()
    assert re.match(r'[0-9a-z]+$', changeset)
    return changeset

def diff_against_changeset(changeset):
    return run_or_exit(f'hg diff --git -r {changeset}')

def sync_changes():
    mq_patches = run_or_exit('hg qapplied').splitlines()
    if mq_patches:
        sys.exit("MQ patches are applied, not syncing")

    client = os.environ['SSH_CLIENT'].split()[0]
    if not client:
        sys.exit("SSH_CLIENT not set, can't identify server")
    assert re.match(r'(\d+\.){3}\d+$', client)

    tree = os.path.basename(os.getcwd())

    print(f"Fetching changes for '{tree}' from {client}")
    response = run_or_exit(f'ssh {client} "syncTree --print-changes {tree}"')
    [changeset, diff] = json.loads(response)
    linecount = len(diff.splitlines())
    print(f"Fetched {linecount} line diff against changeset {changeset}")

    file = tempfile.NamedTemporaryFile(mode='wb', delete=False)
    file.write(diff.encode())
    file.close()
    path = file.name

    print("Reverting local changes")
    run_or_exit('hg revert --all')
    run_or_exit('hg purge')

    print("Updating to parent changeset")
    run_or_exit(f'hg update -r {changeset}')

    print("Applying diff")
    run_or_exit(f'hg import --no-commit {path}')

    os.remove(path)
    print("done.")

def run_or_exit(command):
    p = subprocess.run(command, shell=True, capture_output=True, text=True)
    if p.returncode != 0:
        sys.exit(f'Failed to run {command}: {p.stderr}')
    return p.stdout

if args.print_changes:
    path = "~/work/" + args.print_changes
    path = os.path.expanduser(path)
    if not os.path.isdir(path):
        sys.exit("Tree not found: " + path)
    os.chdir(path)

    print_changes()
else:
    chdir_to_source_root()
    sync_changes()
