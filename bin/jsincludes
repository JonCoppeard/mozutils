#!/usr/bin/env python3

# Simplistic script to generate graph of include dependencies.

import argparse
import glob
import os.path
import re
import subprocess
import sys
import tempfile

parser = argparse.ArgumentParser(description = 'Discover SpiderMonkey include graphs')
parser.add_argument('--graph', '-g', dest='action', action='store_const', const='graph',
                    help='Create include graph')
parser.add_argument('--reverse', '-r', dest='action', action='store_const', const='reverse',
                    help='Find who includes files')
parser.add_argument('--paths', '-p', dest='action', action='store_const', const='paths',
                    help='Find paths between two files')
parser.add_argument('--summary', '-s', action='store_true',
                    help='Only print a single per file')
parser.add_argument('files', metavar='FILE', nargs='*', help='Source files to process')
args = parser.parse_args()

# Match double quoted but not angle bracketed includes.
IncludeRe = re.compile('^#include\s+"([^\s]+)"')

def findAllPublicHeaders():
    return glob.glob("public/*.h")

def findAllSourceFiles():
    def dirContainsSource(name):
        return "test" not in name and "build" not in name

    paths = glob.glob("public/*.h")
    for root, dirs, files in os.walk("src"):
        dirs[:] = filter(dirContainsSource, dirs)
        for file in files:
            if file.endswith(".cpp") or file.endswith(".h"):
                paths.append(os.path.join(root, file))

    return paths

cachedFileInfo = {}

def readFileInfo(path):
    assert path not in cachedFileInfo
    if not os.path.exists(path):
        sys.exit("File not found: " + path)
    lineCount = 0
    includes = []
    with open(path, "r") as file:
        for line in file:
            lineCount += 1
            match = IncludeRe.match(line)
            if match:
                includes.append(match.group(1))
    cachedFileInfo[path] = lineCount, includes

def getLineCount(path):
    if path not in cachedFileInfo:
        readFileInfo(path)
    return cachedFileInfo[path][0]

def getIncludeDirectives(path):
    if path not in cachedFileInfo:
        readFileInfo(path)
    return cachedFileInfo[path][1]

def shouldProcessInclude(path):
    return (path.endswith(".h") and
            not path.startswith("mozilla/") and
            not path.startswith("unicode/") and
            not path.startswith("pr") and
            not path.endswith("Generated.h") and
            not path.endswith(".out.h") and
            not path.endswith("javascript-trace.h") and
            not path in ["js-config.h",
                         "fdlibm.h",
                         "ffi.h",
                         "Instruments.h",
                         "sharkctl.h",
                         "gdb-tests.h",
                         "VMPI.h",
                         "vprof.h",
                         "mozmemory.h"])

def mapInclude(path):
    if path.startswith("js/"):
        return re.sub("^js/", "public/", path)
    return "src/" + path

def getIncludes(path):
    return [mapInclude(include)
            for include in getIncludeDirectives(path) if shouldProcessInclude(include)]

def nameInclude(path):
    return re.sub("^public/", "", path)

def makeGraph(files, output):
    includes = []
    processedFiles = set()

    while files:
        file = files.pop()
        if file in processedFiles:
            continue

        processedFiles.add(file)
        name = nameInclude(file)
        for target in getIncludes(file):
            if target not in processedFiles:
                files.append(target)
            includes.append((name, nameInclude(target)))

    f = tempfile.NamedTemporaryFile("w", delete = False)

    output.write("digraph G {\n")
    output.write("  concentrate = true;\n")
    output.write("  rankdir = LR;\n")
    for source, target in includes:
        output.write('  "%s" -> "%s";\n' % (source, target))
    output.write("}\n")

def drawGraph(dotFile):
    output = dotFile + ".png"

    subprocess.run(['dot', dotFile, '-Tpng', '-o' + output], check = True)
    print(output)

    os.unlink(dotFile)
    #os.unlink(output)

def pathWidth(results):
    return max([2 * level + len(name) for name, level in results]) + 2

def findIncludes(files):
    totalIncludes = 0
    totalLines = 0

    def process(file, level):
        results.append((file, level))
        processedFiles.add(file)
        includeCount = 1
        lineCount = getLineCount(file)
        for target in getIncludes(file):
            if target not in processedFiles:
                includes, lines = process(target, level + 1)
                includeCount += includes
                lineCount += lines
        includeCounts[file] = includeCount
        lineCounts[file] = lineCount
        return includeCount, lineCount

    for file in files:
        results = []
        processedFiles = set()
        includeCounts = {}
        lineCounts = {}
        process(file, 0)

        if args.summary:
            results = results[:1]

        width = pathWidth(results)
        for name, level in results:
            indentedName = "  " * level + name
            print("%-*s %4d %8d" % (width, indentedName, includeCounts[name], lineCounts[name]))

        totalIncludes += includeCounts[file]
        totalLines += lineCounts[file]

    if len(files) > 1:
            print("%-40s %4d %8d" % ("Total", totalIncludes, totalLines))

def findInclusions(files):
    includeMap = {}
    sourceFiles = findAllSourceFiles()
    for file in sourceFiles:
        includes = getIncludes(file)
        for include in includes:
            if include not in includeMap:
                includeMap[include] = []
            includeMap[include].append(file)

    for file in sourceFiles:
        if file.endswith(".cpp"):
            assert file not in includeMap, "Nothing should include source file: " + file

    def process(file, level):
        assert file in sourceFiles, "Unknown file: " + file
        if file in processedFiles:
            return 0

        processedFiles.add(file)

        results.append((file, level))

        if file not in includeMap:
            includeCounts[file] = 1
            return 1

        includeCount = 0

        for inclusion in includeMap[file]:
            includeCount += process(inclusion, level + 1)

        includeCounts[file] = includeCount
        return includeCount

    for file in files:
        results = []
        includeCounts = {}
        processedFiles = set()
        process(file, 0)

        if args.summary:
            results = results[:1]

        width = pathWidth(results)
        for file, level in results:
            count = includeCounts[file]
            indentedFile = "  " * level + file
            if count != 0:
                if level == 0:
                    lines = count * getLineCount(file)
                    print("%-*s %4d %8d" % (width, indentedFile, count, lines))
                else:
                    print("%-*s %4d" % (width, indentedFile, count))

def findPaths(files):
    if len(files) != 2:
        sys.exit("--paths option takes exactly two files")

    fromFile, toFile = files[0], files[1]

    processedFiles = set()

    def findInFile(file, path):
        if file in processedFiles:
            return
        processedFiles.add(file)

        path = path + [file]
        includes = getIncludes(file)
        for include in includes:
            if include == toFile:
                print(path + [include])
            else:
                findInFile(include, path)

    findInFile(fromFile, [])

dirPrefix = []
while not os.path.isfile("src/jsapi.h"):
    dirPrefix.insert(0, os.path.basename(os.getcwd()))
    if len(dirPrefix) > 5:
        break
    os.chdir("..");

if not os.path.isfile("src/jsapi.h"):
    sys.exit("Can't find SpiderMonkey source dir")

if args.files:
    dirPrefix = os.path.join(dirPrefix[0], *dirPrefix[1:])
    filesToProcess = [os.path.normpath(os.path.join(dirPrefix, file)) for file in args.files]
else:
    filesToProcess = findAllPublicHeaders()

if args.action == 'graph':
    makeGraph(filesToProcess, sys.stdout)
elif args.action == 'reverse':
    findInclusions(filesToProcess)
elif args.action == 'paths':
    findPaths(filesToProcess)
else:
    findIncludes(filesToProcess)
