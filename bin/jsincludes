#!/usr/bin/env python3

# Query spidermonkey include graph.

import argparse
import math
import os.path
import re
import subprocess
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))
from includes import *

parser = argparse.ArgumentParser(description = 'Discover SpiderMonkey include graphs')
parser.add_argument('--dot-graph', '-g', dest='action', action='store_const', const='dot_graph',
                    help='Generate include graph in DOT format')
parser.add_argument('--json-graph', '-j', dest='action', action='store_const', const='json_graph',
                    help='Generate include graph in JSON format')
parser.add_argument('--reverse', '-r', dest='action', action='store_const', const='reverse',
                    help='Find who includes files')
parser.add_argument('--paths', '-p', dest='action', action='store_const', const='paths',
                    help='Find paths between two files')
parser.add_argument('--total', '-t', dest='action', action='store_const', const='total',
                    help='Find total lines that would be built (in a non-unified build)')
parser.add_argument('--profile', '-f', dest='action', action='store_const', const='profile',
                    help='Profile removing individual includes')
parser.add_argument('--summary', '-s', action='store_true',
                    help='Only print a single per file')
parser.add_argument('files', metavar='FILE', nargs='*', help='Source files to process')
args = parser.parse_args()

def nameInclude(path):
    name = re.sub("^public/", "js/", path)
    name = re.sub("^src/", "", name)
    return name

def nodeSize(path):
    return max(math.sqrt(getLineCount(path)) / 10, 1)

def nodeColour(path):
    if path.startswith('public/'):
        return 'yellow'
    if path.startswith('src/gc/'):
        return 'green'
    if path.startswith('src/vm/'):
        return 'purple'
    if path.startswith('src/ds/'):
        return 'gray'
    if path.startswith('src/jit/'):
        return 'blue'
    if path.startswith('src/builtin/'):
        return 'pink'
    if path.startswith('src/wasm/'):
        return 'orange'
    return 'red'

def generateDOTGraph(files, output):
    includes = []
    processedFiles = set()

    while files:
        file = files.pop()
        if file in processedFiles:
            continue

        processedFiles.add(file)
        for target in getIncludes(file):
            if target not in processedFiles:
                files.append(target)
            includes.append((file, target))

    output.write("digraph G {\n")
    output.write('  size = "10, 7.5";\n')
    output.write("  concentrate = true;\n")
    output.write("  rankdir = LR;\n")
    for path in processedFiles:
        output.write('    "%s" [shape=circle, width=%f, style=filled, color=%s];\n' % (
            nameInclude(path),
            nodeSize(path),
            nodeColour(path)))
    for source, target in includes:
        output.write('  "%s" -> "%s" [color=%s];\n' % (
            nameInclude(source),
            nameInclude(target),
            nodeColour(target)))
    output.write("}\n")

def generateJSONGraph(files, output):
    includes = {}

    while files:
        file = files.pop()
        if file in includes:
            continue

        includes[file] = set()
        for target in getIncludes(file):
            includes[file].add(target)
            if target not in includes:
                files.append(target)

    output.write("[\n")
    first = True
    for file in sorted(includes.keys()):
        if first:
            first = False
        else:
            output.write(",")
        output.write("\n{\"name\":\"%s\",\"imports\":[" % file)
        output.write(",".join(map(lambda s: "\"%s\"" % s, sorted(includes[file]))))
        output.write("]}")
    output.write("\n]\n")

def drawGraph(dotFile):
    output = dotFile + ".png"

    subprocess.run(['dot', dotFile, '-Tpng', '-o' + output], check = True)
    print(output)

    os.unlink(dotFile)
    #os.unlink(output)

def maxPathWidth(stats):
    return max([2 * level + len(path) for level, path, _1, _2 in stats]) + 2

# Return a list of (level, path, includeCount, lineCount) tuples.
def generateIncludeStats(level, path, processedPaths):
    assert path not in processedPaths
    processedPaths.add(path)

    stats = []
    includeCount = 1
    lineCount = getLineCount(path)

    for target in getIncludes(path):
        if target not in processedPaths:
            targetStats = generateIncludeStats(level + 1, target, processedPaths)
            includeCount += targetStats[0][2]
            lineCount += targetStats[0][3]
            stats.extend(targetStats)

    stats.insert(0, (level, path, includeCount, lineCount))
    return stats

# Return an (includeCount, lineCount) tuple.
def calculateIncludeTotals(path, processedPaths):
    assert path not in processedPaths
    processedPaths.add(path)

    includeCount = 1
    lineCount = getLineCount(path)

    for target in getIncludes(path):
        if target not in processedPaths:
            (includes, lines) = calculateIncludeTotals(target, processedPaths)
            includeCount += includes
            lineCount += lines

    return (includeCount, lineCount)

def findIncludes(paths):
    totalIncludeCount = 0
    totalLineCount = 0
    stats = []

    for path in paths:
        pathStats = generateIncludeStats(0, path, set())
        if args.summary:
            stats.append(pathStats[0])
        else:
            stats.extend(pathStats)
        totalIncludeCount += pathStats[0][2]
        totalLineCount += pathStats[0][3]

    if len(paths) > 1:
        stats.append((0, "TOTAL", totalIncludeCount, totalLineCount))

    width = maxPathWidth(stats)
    for level, path, includeCount, lineCount in stats:
        indentedPath = "  " * level + path
        print("%-*s %6d %9d" % (width, indentedPath, includeCount, lineCount))

def findTotal(paths):
    totalIncludeCount = 0
    totalLineCount = 0
    for path in paths:
        (includes, lines) = calculateIncludeTotals(path, set())
        totalIncludeCount += includes
        totalLineCount += lines

    print("TOTAL %6d %9d" % (totalIncludeCount, totalLineCount))

def profileRemovals(paths):
    totalIncludeCount = 0
    totalLineCount = 0
    for path in paths:
        pathStats = generateIncludeStats(0, path, set())
        totalIncludeCount += pathStats[0][2]
        totalLineCount += pathStats[0][3]

    stats = [(0, "TOTAL", totalIncludeCount, totalLineCount)]

    for path in cachedFileInfo:
        includes = getIncludes(path)
        for i in range(len(includes)):
            removed = includes[i]
            testIncludes = includes[:i] + includes[i+1:]
            assert len(testIncludes) + 1 == len(includes)
            assert removed not in testIncludes
            cachedFileInfo[path][1] = testIncludes

            testIncludeCount = 0
            testLineCount = 0
            for p in paths:
                (includeCount, lineCount) = calculateIncludeTotals(p, set())
                testIncludeCount += includeCount
                testLineCount += lineCount

            if testLineCount != totalLineCount or testIncludeCount != totalIncludeCount:
                stats.append((0, "%s -> %s" % (path, removed), testIncludeCount, testLineCount))

        cachedFileInfo[path][1] = includes

    width = maxPathWidth(stats)
    for level, path, includeCount, lineCount in stats:
        print("%-*s %6d %9d" % (width, path, includeCount, lineCount))

# Return a list of (level, path, inclusionCount, lineCount) tuples.
def generateInclusionStats(level, path, processedPaths):
    assert path not in processedPaths
    processedPaths.add(path)

    lineCount = getLineCount(path)
    if path.endswith(".cpp"):
        return [(level, path, 1, lineCount)]

    stats = []
    inclusionCount = 0

    for target in getInclusions(path):
        if target not in processedPaths:
            targetStats = generateInclusionStats(level + 1, target, processedPaths)
            inclusionCount += targetStats[0][2]
            stats.extend(targetStats)

    stats.insert(0, (level, path, inclusionCount, inclusionCount * lineCount))
    return stats

def findInclusions(paths):
    totalInclusionCount = 0
    totalLineCount = 0
    stats = []

    for path in paths:
        pathStats = generateInclusionStats(0, path, set())
        if args.summary:
            stats.append(pathStats[0])
        else:
            stats.extend(pathStats)
        totalInclusionCount += pathStats[0][2]
        totalLineCount += pathStats[0][3]

    if len(paths) > 1:
        stats.append((0, "TOTAL", totalInclusionCount, totalLineCount))

    width = maxPathWidth(stats)
    for level, path, inclusionCount, lineCount in stats:
        indentedPath = "  " * level + path
        print("%-*s %6d %9d" % (width, indentedPath, inclusionCount, lineCount))

def findPaths(files):
    if len(files) != 2:
        sys.exit("--paths option takes exactly two files")

    fromFile, toFile = files[0], files[1]

    processedFiles = set()

    def findInFile(file, path):
        if file in processedFiles:
            return
        processedFiles.add(file)

        path = path + [file]
        includes = getIncludes(file)
        for include in includes:
            if include == toFile:
                print(path + [include])
            else:
                findInFile(include, path)

    findInFile(fromFile, [])

dirPrefix = []
while not os.path.isfile("src/jsapi.h"):
    dirPrefix.insert(0, os.path.basename(os.getcwd()))
    if len(dirPrefix) > 5:
        break
    os.chdir("..");

if not os.path.isfile("src/jsapi.h"):
    sys.exit("Can't find SpiderMonkey source dir")

dirPrefix = os.path.join(dirPrefix[0], *dirPrefix[1:])

if args.files:
    filesToProcess = [os.path.normpath(os.path.join(dirPrefix, file))
                      for file in args.files]
else:
    filesToProcess = findAllCppFiles()

if args.action == 'dot_graph':
    generateDOTGraph(filesToProcess, sys.stdout)
if args.action == 'json_graph':
    generateJSONGraph(filesToProcess, sys.stdout)
elif args.action == 'reverse':
    findInclusions(filesToProcess)
elif args.action == 'paths':
    findPaths(filesToProcess)
elif args.action == 'total':
    findTotal(filesToProcess)
elif args.action == 'profile':
    profileRemovals(filesToProcess)
else:
    findIncludes(filesToProcess)
