#!/usr/bin/env python

# Python script to build Firefox

import os
import os.path
import sys
import shutil
import argparse
import multiprocessing
import time

# Import common functions
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'lib'))
from mozutils import *

common_options = '--enable-profiling'
debug_options = '--enable-debug --enable-gczeal --disable-optimize'
optdebug_options = '--enable-debug --enable-gczeal --enable-optimize'
opt_options = '--disable-debug --enable-optimize'
prof_options = '--disable-debug --enable-optimize'
valgrind_options = '--enable-valgrind --disable-jemalloc --disable-replace-malloc'

android_home = os.path.expanduser('~/software/android')
fennec_options = ' '.join(['--enable-application=mobile/android',
                           '--target=arm-linux-androideabi',
                           '--with-android-ndk="%s/android-ndk-r8e"' % android_home,
                           '--with-android-sdk="%s/adt-bundle/sdk/platforms/android-19"' % android_home])

build_configs = {
    'default': '',
    'fennec': fennec_options,
    'fennec6': fennec_options + ' --with-arch=armv6'
}

parser = argparse.ArgumentParser(description = 'Build Firefox')
parser.add_argument('-o', '--opt', action='store_true', help = 'Optimized rather than debug build')
parser.add_argument('-d', '--optdebug', action='store_true', help = 'Optimized debug build')
parser.add_argument('-p', '--prof', action='store_true', help = 'Profiling build')
parser.add_argument('-V', '--valgrind', action='store_true', help = 'Build with valgrind')
parser.add_argument('-c', '--clean', action='store_true', help = 'Clean build')
parser.add_argument('-w', '--warnings', action='store_true', help = 'Show warnings')
parser.add_argument('-v', '--verbose', action='store_true', help = 'Show all build output')
parser.add_argument('-g', '--gcc', action='store_true', help = 'Force use of GCC rather than Clang')
parser.add_argument('-n', '--dry-run', action='store_true', help = 'Dry run, check arguments but don\'t build')
parser.add_argument('-i', '--dist', action='store_true', help = 'Distribute build using icecc')
parser.add_argument('-S', '--no-sync', action='store_false', dest='sync', default=True,
                    help = 'Don\'t sync cloned branch')
parser.add_argument('config', nargs ='?', choices = build_configs.keys(), default = 'default',
                    help = 'Build config to use')
args = parser.parse_args()
if args.opt and args.optdebug:
    sys.exit("Can't specify both --opt and --optdebug")

icecream_path = get_icecream_path()
if args.dist and not icecream_path:
    sys.exit("icecc not found on path")

chdir_to_source_root()

name_elements = []
if args.config != 'default':
    name_elements.append(args.config)
if args.optdebug:
    name_elements.append("optdebug")
elif args.opt:
    name_elements.append("opt")
elif args.prof:
    name_elements.append("prof")
if args.valgrind:
    name_elements.append("valgrind")
if args.gcc:
    name_elements.append("gcc")
if args.dist:
    name_elements.append("dist")
if not name_elements:
    name_elements.append("default")
build_name = '-'.join(name_elements)
build_dir = build_name + "-build"

if args.dry_run:
    sys.exit(0)

if os.path.isfile('.cloned-from') and args.sync:
    subprocess.check_call(os.path.join(os.path.dirname(__file__), 'pullBranch'))

if args.clean and os.path.exists(build_dir):
    print("Clean " + build_name)
    print("  Cleaning will commence in 5 seconds!  Interrupt now to preserve the build")
    time.sleep(5);  # so I can hit ^C after I accidentally do this
    shutil.rmtree(build_dir)

if not os.path.exists(build_dir):
    os.makedirs(build_dir)

mozconfig_file = build_dir + "/mozconfig"
if not os.path.exists(mozconfig_file):
    autoconf_path = which("autoconf213") or which("autoconf2.13")
    if not autoconf_path:
        exit_fatal("Can't find autoconf 2.13 on path")

    ensureExe("ccache")
    ensureExe("sccache")

    with open(mozconfig_file, 'w') as f:
        if args.config != 'fennec':
            f.write(". $topsrcdir/browser/config/mozconfig\n")

        def setCompiler(c_name, cpp_name):
            ensureExe(c_name)
            ensureExe(cpp_name)
            f.write("CC='%s'\n" % c_name)
            f.write("CXX='%s'\n" % cpp_name)

        def addMakeOption(option):
            f.write("mk_add_options %s\n" % option)

        def addOptions(options_string):
            if options_string:
                for option in options_string.split(' '):
                    f.write("ac_add_options %s\n" % option)

        if args.gcc:
            setCompiler("gcc", "g++")
        elif sys.platform == 'darwin' and args.dist:
            f.write("CC='%s/cc'\n" % icecream_path)
            f.write("CXX='%s/c++'\n" % icecream_path)
        else:
            setCompiler("clang", "clang++")

        addMakeOption("MOZ_OBJDIR=@TOPSRCDIR@/%s-build" % build_name)

        job_count = 100 if args.dist else multiprocessing.cpu_count()
        addMakeOption("MOZ_MAKE_FLAGS=\"-s -j%d\"" % job_count)

        if args.dist and sys.platform != 'darwin':
            addMakeOption("'export CCACHE_PREFIX=icecc'")
        if not args.dist or sys.platform != 'darwin':
            addOptions("--with-ccache")

        addMakeOption("'export RUSTC_WRAPPER=sccache'")

        addMakeOption("AUTOCONF=%s" % autoconf_path)
        addMakeOption("AUTOCLOBBER=1")
        addOptions(common_options)

        if args.optdebug:
            addOptions(optdebug_options)
        elif args.opt:
            addOptions(opt_options)
        elif args.prof:
            addOptions(prof_options)
        else:
            addOptions(debug_options)

        if not args.opt and args.config != 'fennec':
            addOptions("--enable-debug-symbols --disable-install-strip")

        if args.valgrind:
            addOptions(valgrind_options)

        addOptions(build_configs[args.config])

os.environ['MOZCONFIG'] = os.path.abspath(mozconfig_file)

print("Build %s" % build_name)
run_command(['./mach', 'build'], args.verbose, args.warnings)
