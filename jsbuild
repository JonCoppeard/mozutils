#!/bin/bash

function badUsage()
{
    echo "jsbuild OPTIONS BUILDS"
    echo "  OPTIONS:"
    echo "    -c => clean first"
    echo "    -C => don't clean first (default)"
    echo "  BUILDS:"
    echo "    debug"
    echo "    nothread"
    echo "    valgrind"
    echo "    rooting"
    echo "    release"
    echo "    noccache"
    exit 1
}

LOGFILE=jsbuild.log

CCACHE_OPTS="--with-ccache=`which ccache`"
THREAD_OPTS="--with-system-nspr --enable-threadsafe"
DEBUG_OPTS="--enable-debug --disable-optimize --enable-gczeal"
VALGRIND_OPTS="--disable-jemalloc --enable-valgrind"
ROOTING_OPTS="--enable-root-analysis --disable-threadsafe"

NOTHREAD_CONFIG="$CCACHE_OPTS $DEBUG_OPTS"
DEBUG_CONFIG="$CCACHE_OPTS $DEBUG_OPTS $THREAD_OPTS"
VALGRIND_CONFIG="$CCACHE_OPTS $DEBUG_OPTS $THREAD_OPTS $VALGRIND_OPTS"
ROOTING_CONFIG="$CCACHE_OPTS $DEBUG_OPTS $ROOTING_OPTS"
RELEASE_CONFIG="$CCACHE_OPTS"
NOCCACHE_CONFIG=""

CLEAN=
DEBUG=
NOTHREAD=
VALGRIND=
ROOTING=
RELEASE=
NOCCACHE=

while [ $# -ge 1 ]; do
    case "$1" in
        -c)
            CLEAN=t
            ;;
        -C)
            CLEAN=
            ;;
        debug)
            DEBUG=t
            ;;
        nothread)
            NOTHREAD=t
            ;;
        release)
            RELEASE=t
            ;;
        valgrind)
            VALGRIND=t
            ;;
        rooting)
            ROOTING=t
            ;;
        noccache)
            NOCCACHE=t
            ;;
        *)
            badUsage
            ;;
    esac
    shift
done

if [ -z "$DEBUG" -a -z "$NOTHREAD" -a -z "$VALGRIND" -a -z "$ROOTING" -a -z "$RELEASE" -a -z "$NOCCACHE" ]; then
    DEBUG=t
fi

if [ ! -e ./jsapi.h ]; then
    echo Run jsbuild from the tree/js/src directory
    exit 1
fi

function fail()
{
    echo "Build failed, see $LOGFILE"
    exit 1
}

function build()
{
    local NAME=$1
    local DIR=$2
    local CONFIG=$3
    local CLEAN=$4

    if [ -n "$CLEAN" ]; then
        echo "Clean $NAME"
        rm -rf $DIR
    fi

    if [ ! -d $DIR ]; then
        echo "Configure $NAME"
        mkdir $DIR
        cd $DIR
        echo configure $CONFIG > $LOGFILE
        ../configure $CONFIG >> $LOGFILE 2>&1 || fail
        cd ..
    fi

    echo "Build $NAME"
    make -C $DIR -j8 2>&1 | tee -a $DIR/$LOGFILE | grep -iE "warning:|error:"
    if [ ${PIPESTATUS[0]} -ne "0" ]; then
        fail
    fi
}

rm -f $LOGFILE

if [ configure.in -nt configure ]; then

    echo "Autoconf"
    AUTOCONF=`which autoconf213`
    if [ -z "$AUTOCONF" ]; then
        AUTOCONF=`which autoconf2.13`
    fi
    if [ -z "$AUTOCONF" ]; then
        echo "Can't find autoconf 2.13"
        exit 1
    fi
    $AUTOCONF || fail

    echo "Clean all"
    rm -rf debug-build nothread-build valgrind-build rooting-build release-build
    CLEAN=
fi

# Clang is preferred for rooting builds (it shows up more problems), and it much
# faster in general, so use it if possible
CLANGCC=`which clang`
CLANGCXX=`which clang++`
if [ -n "$CLANGCC" -a -n "$CLANGCXX" ]; then
    export CC=$CLANGCC
    export CXX=$CLANGCXX
fi

if [ -n "$DEBUG" ]; then
    build debug debug-build "$DEBUG_CONFIG" "$CLEAN"
fi

if [ -n "$NOTHREAD" ]; then
    build nothread nothread-build "$NOTHREAD_CONFIG" "$CLEAN"
fi

if [ -n "$VALGRIND" ]; then
    build valgrind valgrind-build "$VALGRIND_CONFIG" "$CLEAN"
fi

if [ -n "$RELEASE" ]; then
    build release release-build "$RELEASE_CONFIG" "$CLEAN"
fi

if [ -n "$ROOTING" ]; then
    build rooting rooting-build "$ROOTING_CONFIG" "$CLEAN"
fi

if [ -n "$NOCCACHE" ]; then
    build noccache noccache-build "$NOCCACHE_CONFIG" "$CLEAN"
fi
