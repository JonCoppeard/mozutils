#!/usr/bin/env python

# Python script to build SpiderMonkey

import os
import os.path
import sys
import shutil
import argparse
import subprocess

build_options = {
    'common':  '--with-ccache=`which ccache`',
    'thread':  '--with-system-nspr --enable-threadsafe',
    'ctypes':  '--enable-ctypes --with-system-nspr --enable-threadsafe',
    'debug':   '--enable-debug --disable-optimize --enable-gczeal',
    'rooting': '--enable-root-analysis --disable-threadsafe',
    'exact':   '--enable-exact-rooting --disable-threadsafe',
    'ggc':     '--enable-gcgenerational --enable-exact-rooting --disable-threadsafe'
}

build_configs = {
    'debug':   ['common', 'thread', 'debug'],
    'opt':     ['common'],
    'rooting': ['common', 'debug', 'rooting'],
    'exact':   ['common', 'debug', 'exact'],
    'ggc':     ['common', 'debug', 'ggc']
}

parser = argparse.ArgumentParser(description = 'Build SpiderMonkey')
parser.add_argument('-c', '--clean', action='store_true', help = 'Clean build')
parser.add_argument('-C', '--no-clean', action='store_false', dest = 'clean')
parser.add_argument('-w', '--warnings', action='store_true', help = 'Show warnings')
parser.add_argument('-v', '--verbose', action='store_true', help = 'Show all build output')
parser.add_argument('-x', '--crossCompile', action='store_true', help = 'Cross compile for ARM')
parser.add_argument('build', nargs ='?', choices = build_configs.keys().sort(), 
                    default = 'debug', help = 'Build config to use')
args = parser.parse_args()

def which(name):
    try:
        return subprocess.check_output('which ' + name, shell = True).splitlines()[0]
    except subprocess.CalledProcessError:
        return None

ccache = which('ccache')

try:
    nproc = int(subprocess.check_output('nproc').splitlines()[0])
except subprocess.CalledProcessError:
    nproc = 8

if not os.path.isfile("jsapi.h"):
    sys.exit('Run jsbuild from the js/src directory')

if os.path.getmtime('configure.in') > os.path.getmtime('configure'):
    print('Autoconf')
    autoconf = which('autoconf213') or which('autoconf2.13')
    if not autoconf:
        sys.exit('Can\'t find autoconf 2.13')
    subprocess.check_call(autoconf)

    print('Clean all')
    args.clean = False
    for build in build_configs.keys():
        if os.path.isdir(build):
            shutil.rmtree(build)

clang_cc = which('clang')
clang_cxx = which('clang++')

arm_cc = which('arm-linux-gnueabi-gcc')
arm_cxx = which('arm-linux-gnueabi-g++')
if args.crossCompile and not (arm_cc and arm_cxx):
    sys.exit("ARM cross compiler not found on PATH")

def run_command(command):
    if args.verbose:
        print(command)
    proc = subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.STDOUT, 
                            shell = True)
    while proc.poll() == None:
        line = proc.stdout.readline()
        if not line:
            break
        if args.verbose or "error:" in line or (args.warnings and "warning:" in line):
            print(line.rstrip())
    if proc.returncode:
        sys.exit('Command failed with returncode ' + str(proc.returncode))

def build(name, clean, crossCompile = False):
    if crossCompile:
        nonCrossDir = name + '-build'
        name += '-arm'
    dir = name + '-build'

    if clean:
        print('Clean ' + name)
        if os.path.isdir(dir):
            shutil.rmtree(dir)

    if args.verbose:
        filter = '.'
    elif args.warnings:
        filter = 'Entering\\ directory|error:|warning:'
    else:
        filter = 'Entering\\ directory|error:'

    if not os.path.isdir(dir):
        print('Configure ' + name)
        os.mkdir(dir)
        os.chdir(dir)

        config = ' '.join([build_options[opt] for opt in build_configs[args.build]])
        if crossCompile:
            config += ' --build=i686 --host=arm-linux-gnueabi --target=arm-linux-gnueabi --enable-static --enable-js-static-build --disable-shared --disable-intl-api --with-cross-lib=/usr/arm-linux-gnueabi/lib'

        if crossCompile:
            os.environ['CC'] = 'arm-linux-gnueabi-gcc'
            os.environ['CXX'] = 'arm-linux-gnueabi-g++'
            os.environ['LD'] = 'arm-linux-gnueabi-ld'
        elif clang_cc and clang_cxx:
            # Clang is preferred for rooting builds (it shows up more problems), and it much
            # faster in general, so use it if possible
            os.environ['CC'] = clang_cc
            os.environ['CXX'] = clang_cxx
        else:
            os.environ['CC'] = ''
            os.environ['CXX'] = ''

        run_command('../configure ' + config)
        os.chdir('..')

    if crossCompile:
        # Some binaries get run on the build computer, but they get
        # built for the target so this doesn't work.  Copy those
        # binaries from a previous non-cross build
        print('Bodging ' + name)
        shutil.copy(nonCrossDir + '/config/nsinstall', dir + '/config')
        shutil.copy(nonCrossDir + '/config/nsinstall_real', dir + '/config')
        shutil.copy(nonCrossDir + '/host_jskwgen', dir)
        shutil.copy(nonCrossDir + '/host_jsoplengen', dir)

    print('Build ' + name)
    run_command('nice make -C %s -j%d' % (dir, nproc))

build(args.build, False, False)
if args.crossCompile:
    build(args.build, args.clean, True)
