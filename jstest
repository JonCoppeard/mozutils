#!/bin/bash

function badUsage()
{
    echo "usage: jstest OPTIONS BUILDS TESTS"
    echo "  OPTIONS:"
    echo "    -c      => clean first"
    echo "    -C      => don't clean first (default)"
    echo "    -z ZEAL => turn on GC zeal"
    echo "    -p      => run tests in Pacific timezone"
    echo "  BUILDS:"
    echo "    debug"
    echo "    nothread"
    echo "    valgrind"
    echo "    rooting"
    echo "    release"
    echo "  TESTS:"
    echo "    jsapitest"
    echo "    v8test"
    echo "    jittest"
    echo "    jstest"
    exit 1
}

CLEAN=
ZEAL=
TIMEZONE=`cat /etc/timezone`
DEBUG=
NOTHREAD=
VALGRIND=
ROOTING=
NOTHREAD=
RELEASE=
JSAPITEST=
V8TEST=
JITTEST=
JSTEST=

while [ $# -ge 1 ]; do
    case "$1" in
        -c)
            CLEAN=-c
            ;;
        -C)
            CLEAN=-C
            ;;
        -z)
            ZEAL=$2
            shift
            ;;
        -p)
            TIMEZONE=PST
            LOCALE=en_US.utf8
            ;;
        debug)
            DEBUG=debug
            ;;
        nothread)
            NOTHREAD=nothread
            ;;
        valgrind)
            VALGRIND=valgrind
            ;;
        rooting)
            ROOTING=rooting
            ;;
        release)
            RELEASE=release
            ;;
        jsapitest)
            JSAPITEST=t
            ;;
        v8test)
            V8TEST=t
            ;;
        jittest)
            JITTEST=t
            ;;
        jstest)
            JSTEST=t
            ;;
        *)
            badUsage
            ;;
    esac
    shift
done

if [ -z "$CLEAN" ]; then
    CLEAN=-C
fi

if [ -z "$DEBUG" -a -z "$NOTHREAD" -a -z "$VALGRIND" -a -z "$ROOTING" -a -z "$RELEASE" ]; then
    DEBUG=debug
fi

if [ -z "$JSAPITEST" -a -z "$V8TEST" -a -z "$JITTEST" -a -z "$JSTEST" ]; then
    JSAPITEST=t
    V8TEST=
    JITTEST=t
    JSTEST=t
fi

echo "jstest $PWD $*"
echo
date
echo

if [ -d .hg ]; then
    hg log -l 1 || exit 1
fi

jsbuild $CLEAN $DEBUG $NOTHREAD $VALGRIND $ROOTING $RELEASE || exit 125
# Exit status 125 tells bisect to skip the revision if we can't build it
echo

FAILFILE=jstest.failures.tmp

EXIT=0

function fail()
{
    EXIT=1
}

function jsapi-test()
{
    local NAME=$1
    local JSDIR=$2

    echo "Run $NAME jsapi tests"
    JS_GC_ZEAL=$ZEAL TZ=$TIMEZONE $JSDIR/jsapi-tests/jsapi-tests > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "  failed; run with $JSDIR/jsapi-tests/jsapi-tests to see failures"
        fail
    fi
    echo
}

function v8-test()
{
    local NAME=$1
    local JSDIR=$2

    echo "Run $NAME v8 gc stress test"

    cd v8
    local zeal=$ZEAL
    if [ -z "$zeal" ]; then
        zeal=10,1000
    fi
    JS_GC_ZEAL=$zeal TZ=$TIMEZONE ../$JSDIR/js -m -n -a run.js || fail
    cd ..

    echo
}

function jit-test()
{
    local NAME=$1
    local JSDIR=$2

    echo "Run $NAME jit tests"
    JS_GC_ZEAL=$ZEAL TZ=$TIMEZONE python jit-test/jit_test.py $JSDIR/js || fail
    echo
}

function js-test()
{
    local NAME=$1
    local JSDIR=$2

    echo "Run $NAME js tests"
    JS_GC_ZEAL=$ZEAL TZ=$TIMEZONE python tests/jstests.py -j6 $JSDIR/js || fail
    echo
}

function test()
{
    local NAME=$1
    local JSDIR=$2

    if [ "$NAME" == "release" -a -n "$ZEAL" ]; then
        echo "Warning: GC zeal not supported in relase builds"
    fi

    if [ -n "$JSAPITEST" ]; then
        jsapi-test $NAME $JSDIR
    fi

    if [ -n "$V8TEST" ]; then
        v8-test $NAME $JSDIR
    fi

    if [ -n "$JITTEST" ]; then
        jit-test $NAME $JSDIR
    fi

    if [ -n "$JSTEST" ]; then
        js-test $NAME $JSDIR
    fi
}

if [ -n "$DEBUG" ]; then
    test debug ./debug-build
fi

if [ -n "$NOTHREAD" ]; then
    test nothread ./nothread-build
fi

if [ -n "$VALGRIND" ]; then
    test valgrind ./valgrind-build
fi

if [ -n "$ROOTING" ]; then
    test rooting ./rooting-build
fi

if [ -n "$RELEASE" ]; then
    test release ./release-build
fi

exit $EXIT
