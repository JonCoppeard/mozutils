#!/bin/bash

LOGFILE=mozbuild.log

CLEAN=
DEBUG=
OPT=
OPTDEBUG=
INCRDIR=
SMARTMAKE=

while [ $# -ge 1 ]; do
    case "$1" in
        -c)
            CLEAN=t
            ;;
        -C)
            CLEAN=
            ;;
        -s)
            SMARTMAKE=t
            ;;
        debug)
            DEBUG=t
            ;;
        opt)
            OPT=t
            ;;
        optdebug)
            OPTDEBUG=t
            ;;
        *)
            if [ -z "$INCRDIR" -a -d "$1" ]; then
                INCRDIR=$1
                SMARTMAKE=t
            else
                echo "mozbuild [-c|-C] [debug|opt] [DIR]"
                exit 1
            fi
            ;;
    esac
    shift
done

if [ -z "$DEBUG" -a -z "$OPT" -a -z "$OPTDEBUG" ]; then
    DEBUG=t
fi

function onPath
{
    command -v $1 > /dev/null
}

if [ ! -e ./client.mk ]; then
    echo Run mozbuild from the root of the tree
    exit 1
fi

if [ -n "$SMARTMAKE" ]; then
    if ! onPath smartmake.py; then
        if [ -e ~/software/smartmake/smartmake.py ]; then
            # todo: this is a hack!
            PATH=$PATH:~/software/smartmake
        else
            echo "Can't find smartmake.py on path $PATH"
            echo "Available here: http://hg.mozilla.org/users/josh_joshmatthews.net/smartmake"
            exit 1
        fi
    fi

    if [ ! -e .hg/.smartmake ]; then
        echo "[smartmake]" > .hg/.smartmake
        echo "cmd=make -j8 -C" >> .hg/.smartmake
    fi
fi

function fail()
{        
    echo "Build failed, see $LOGFILE"
    exit 1
}

function createConfig()
{
    local NAME=$1
    local FILE=$2
    local DEBUG=$3
    local OPT=$4

    rm -f $FILE
    echo ". \$topsrcdir/browser/config/mozconfig" >> $FILE
    echo "mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/${NAME}-build" >> $FILE
    echo "mk_add_options MOZ_MAKE_FLAGS=\"-s -j8\"" >> $FILE

    local AUTOCONF=`which autoconf213`
    if [ -z "$AUTOCONF" ]; then
        AUTOCONF=`which autoconf2.13`
    fi
    if [ -z "$AUTOCONF" ]; then
        echo "Can't find autoconf 2.13"
        exit 1
    fi
    echo "mk_add_options AUTOCONF=$AUTOCONF" >> $FILE

    echo "CC=clang" >> $FILE
    echo "CXX=clang++" >> $FILE

    local CCACHE=`which ccache`
    if [ -z "$CCACHE" ]; then
        echo "Can't find ccache"
        exit 1
    fi
    echo "ac_add_options --with-ccache=$CCACHE" >> $FILE

    if [ -n "$DEBUG" ]; then
        echo "ac_add_options --enable-debug" >> $FILE
        echo "ac_add_options --enable-debug-symbols" >> $FILE
    else
        echo "ac_add_options --disable-debug" >> $FILE
        echo "ac_add_options --disable-debug-symbols" >> $FILE
    fi

    if [ -n "$OPT" ]; then
        echo "ac_add_options --enable-optimize" >> $FILE
    else
        echo "ac_add_options --disable-optimize" >> $FILE
    fi

    echo "ac_add_options --enable-profiling" >> $FILE
}

function run()
{
    nice "$@" 2>&1 | tee -a $LOGFILE | grep -iE "error:"
    if [ ${PIPESTATUS[0]} -ne "0" ]; then
        fail
    fi
}

function configureBuild()
{
    local DIR=$1
    local DEBUG=$2
    local OPT=$3

    echo "Configure $NAME"

    mkdir -p $DIR

    export MOZCONFIG=$DIR/mozconfig
    createConfig $NAME $MOZCONFIG $DEBUG $OPT
    run make -f client.mk configure
}

function fullBuild()
{
    local NAME=$1
    local DIR=$2
    local DEBUG=$3
    local OPT=$4

    configureBuild "$DIR" "$DEBUG" "$OPT"

    echo "Build $NAME"
    run make -f client.mk build
}

function incrBuild()
{
    local NAME=$1
    local DIR=$2
    local DEBUG=$3
    local OPT=$4

    if [ ! -d $DIR ]; then
        configureBuild "$DIR" "$DEBUG" "$OPT"
    fi

    echo "Incrementally build $NAME $INCRDIR"
    run smartmake.py -o $DIR $INCRDIR
}

function build()
{
    local NAME=$1
    local DEBUG=$2
    local OPT=$3

    local DIR=$NAME-build
    if [ -d "$DIR" -a -n "$CLEAN" ]; then
        echo "Clean $NAME"
        run make -f client.mk clean
    fi

    if [ -z "$SMARTMAKE" ]; then
        fullBuild "$NAME" "$DIR" "$DEBUG" "$OPT"
    else
        incrBuild "$NAME" "$DIR" "$DEBUG" "$OPT"
    fi
}

rm -f $LOGFILE
touch $LOGFILE

if [ -n "$DEBUG" ]; then
    build debug "t" ""
fi

if [ -n "$OPT" ]; then
    build opt "" "t"
fi

if [ -n "$OPTDEBUG" ]; then
    build optdebug "t" "t"
fi
