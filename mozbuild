#!/usr/bin/env python

# Python script to build Firefox

import os
import os.path
import sys
import shutil
import argparse
import multiprocessing

# Import common functions
install_dir = os.path.dirname(__file__)
sys.path.append(install_dir)
from mozutils import *

common_options = '--enable-warnings-as-errors --enable-crypto --disable-gstreamer --disable-crashreporter'
debug_options = '--enable-debug --enable-debug-symbols --disable-optimize --enable-profiling'
opt_options = '--disable-debug --disable-debug-symbols --enable-optimize'
b2g_options = '--enable-b2g-bt --enable-b2g-camera --enable-b2g-ril'

build_configs = {
    'default': '',
    'rooting': '--enable-root-analysis',
    'exact':   '--enable-exact-rooting',
    'ggc':     '--enable-exact-rooting --enable-gcgenerational',
}

parser = argparse.ArgumentParser(description = 'Build Firefox')
parser.add_argument('-o', '--opt', action='store_true', help = 'Optimized rather than debug build')
parser.add_argument('-c', '--clean', action='store_true', help = 'Clean build')
parser.add_argument('-w', '--warnings', action='store_true', help = 'Show warnings')
parser.add_argument('-v', '--verbose', action='store_true', help = 'Show all build output')
parser.add_argument('-b', '--b2g', action='store_true', help = 'Attempt to build B2G source')
parser.add_argument('-g', '--gcc', action='store_true', help = 'Force use of GCC rather than Clang')
parser.add_argument('-n', '--dry-run', action='store_true', help = 'Dry run, check arguments but don\'t build')
parser.add_argument('config', nargs ='?', choices = build_configs.keys(), default = 'default',
                    help = 'Build config to use')
parser.add_argument('incr_dir', nargs ='?', default = None,
                    help = 'Directory for incremental build')
args = parser.parse_args()

lastDir = os.getcwd()
while not os.path.isfile("client.mk") or not os.path.isdir("mfbt"):
    os.chdir("..")
    currentDir = os.getcwd()
    if currentDir == lastDir:
        sys.exit('Please run mozbuild from within the source tree')
    lastDir = currentDir

if args.incr_dir:
    ensureExe("smartmake.py")

    config_file = ".hg/.smartmake"
    if not os.path.exists(config_file):
        with open(config_file, 'w') as f:
            f.write("[smartmake]\n")
            f.write("cmd=make -j%d -C\n" % multiprocessing.cpu_count())

build_name = args.config
if args.opt:
    build_name += "-opt"
build_dir = build_name + "-build"

if args.dry_run:
    sys.exit(0)

if args.clean and os.path.exists(build_dir):
    print("Clean " + build_name)
    shutil.rmtree(build_dir)

if not os.path.exists(build_dir):
    os.makedirs(build_dir)

mozconfig_file = build_dir + "/mozconfig"
os.environ['MOZCONFIG'] = mozconfig_file
if not os.path.exists(mozconfig_file):

    autoconf_path = which("autoconf213") or which("autoconf2.13")
    if not autoconf_path:
        sys.exit("Can't find autoconf 2.13 on path")

    ccache_path = ensureExe("ccache")

    with open(mozconfig_file, 'w') as f:
        f.write(". $topsrcdir/browser/config/mozconfig\n")

        def setCompiler(c_name, cpp_name):
            ensureExe(c_name)
            ensureExe(cpp_name)
            f.write("CC=%s\n" % c_name)
            f.write("CXX=%s\n" % cpp_name)

        def addMakeOption(option):
            f.write("mk_add_options %s\n" % option)

        def addOptions(options_string):
            for option in options_string.split(' '):
                f.write("ac_add_options %s\n" % option)

        if args.b2g:
            setCompiler("gcc-4.6", "g++-4.6")
        elif args.gcc:
            setCompiler("gcc", "g++")
        else:
            setCompiler("clang", "clang++")

        addMakeOption("MOZ_OBJDIR=@TOPSRCDIR@/%s-build" % build_name)
        addMakeOption("MOZ_MAKE_FLAGS=\"-s -j%d\"" % multiprocessing.cpu_count())
        addMakeOption("AUTOCONF=%s" % autoconf_path)
        addMakeOption("AUTOCLOBBER=1");
        addOptions("--with-ccache=%s" % ccache_path)
        addOptions(common_options)

        addOptions(opt_options if args.opt else debug_options)
        addOptions(build_configs[args.config])
        if args.b2g:
            addOptions(b2g_options)

if args.incr_dir:
    print("Incrementally build %s %s" % (build_name, args.incr_dir))
    run_command("smartmake.py -o %s %s" % (build_dir, args.incr_dir), args.verbose, args.warnings)
else:
    print("Build %s" % build_name)
    run_command("./mach build", args.verbose, args.warnings)
