#!/bin/bash

LOGFILE=mozbuild.log

CLEAN=
DEBUG=
OPT=
OPTDEBUG=
ROOTING=
GGC=
EXACT=
INCRDIR=
SMARTMAKE=
VERBOSE=
USEGCC=
SKIP_B2G=

while [ $# -ge 1 ]; do
    case "$1" in
        -c)
            CLEAN=t
            ;;
        -C)
            CLEAN=
            ;;
        -s)
            SMARTMAKE=t
            ;;
        -v)
            VERBOSE=t
            ;;
        -g)
            USEGCC=t
            ;;
        -B)
            SKIP_B2G=t
            ;;
        debug)
            DEBUG=t
            ;;
        opt)
            OPT=t
            ;;
        optdebug)
            OPTDEBUG=t
            ;;
        rooting)
            ROOTING=t
            ;;
        ggc)
            GGC=t
            ;;
        exact)
            EXACT=t
            ;;
        *)
            if [ -z "$INCRDIR" -a -d "$1" ]; then
                INCRDIR=$1
                SMARTMAKE=t
            else
                echo "mozbuild [-c|-C] [-s] [-v] [debug|opt|optdebug|rooting|ggc|exact] [DIR]"
                exit 1
            fi
            ;;
    esac
    shift
done

if [ -z "$DEBUG" -a -z "$OPT" -a -z "$OPTDEBUG" -a -z "$ROOTING" -a -z "$GGC" -a -z "$EXACT" ]; then
    DEBUG=t
fi

function onPath
{
    command -v $1 > /dev/null
}

if [ ! -e ./client.mk ]; then
    echo Run mozbuild from the root of the tree
    exit 1
fi

if [ -n "$SMARTMAKE" ]; then
    if ! onPath smartmake.py; then
        if [ -e ~/software/smartmake/smartmake.py ]; then
            # todo: this is a hack!
            PATH=$PATH:~/software/smartmake
        else
            echo "Can't find smartmake.py on path $PATH"
            echo "Available here: http://hg.mozilla.org/users/josh_joshmatthews.net/smartmake"
            exit 1
        fi
    fi

    if [ ! -e .hg/.smartmake ]; then
        echo "[smartmake]" > .hg/.smartmake
        echo "cmd=make -j8 -C" >> .hg/.smartmake
    fi
fi

function fail()
{        
    echo "Build failed, see $LOGFILE"
    exit 1
}

function createConfig()
{
    local NAME=$1
    local FILE=$2
    local DEBUG=$3
    local OPT=$4
    local ROOTING=$5
    local EXACT=$6
    local GGC=$7

    rm -f $FILE
    echo ". \$topsrcdir/browser/config/mozconfig" >> $FILE
    echo "mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/${NAME}-build" >> $FILE
    echo "mk_add_options MOZ_MAKE_FLAGS=\"-s -j8\"" >> $FILE

    local AUTOCONF=`which autoconf213`
    if [ -z "$AUTOCONF" ]; then
        AUTOCONF=`which autoconf2.13`
    fi
    if [ -z "$AUTOCONF" ]; then
        echo "Can't find autoconf 2.13"
        exit 1
    fi
    echo "mk_add_options AUTOCONF=$AUTOCONF" >> $FILE

    if [ -n "$USEGCC" ]; then
        echo "CC=gcc" >> $FILE
        echo "CXX=g++" >> $FILE
    else
        echo "CC=clang" >> $FILE
        echo "CXX=clang++" >> $FILE
    fi

    local CCACHE=`which ccache`
    if [ -z "$CCACHE" ]; then
        echo "Can't find ccache"
        exit 1
    fi
    echo "ac_add_options --with-ccache=$CCACHE" >> $FILE

    if [ -n "$DEBUG" ]; then
        echo "ac_add_options --enable-debug" >> $FILE
        echo "ac_add_options --enable-debug-symbols" >> $FILE
    else
        echo "ac_add_options --disable-debug" >> $FILE
        echo "ac_add_options --disable-debug-symbols" >> $FILE
    fi

    if [ -n "$OPT" ]; then
        echo "ac_add_options --enable-optimize" >> $FILE
    else
        echo "ac_add_options --disable-optimize" >> $FILE
    fi

    if [ -n "$ROOTING" ]; then
        echo "ac_add_options --enable-root-analysis" >> $FILE
    fi

    if [ -n "$EXACT" ]; then
        echo "ac_add_options --enable-exact-rooting" >> $FILE
    fi

    if [ -n "$GGC" ]; then
        echo "ac_add_options --enable-gcgenerational" >> $FILE
    fi

    echo "ac_add_options --enable-profiling" >> $FILE

    echo "ac_add_options --enable-warnings-as-errors" >> $FILE
    echo "ac_add_options --enable-crypto" >> $FILEl
    echo "export MOZ_PACKAGE_JSSHELL=1" >> $FILE

    # for some reason this builds started demanding installation of gstreamer
    # packages
    echo "ac_add_options --disable-gstreamer" >> $FILE

    # build b2g stuff unless -B is passed
    if [ -z "$SKIP_B2G" ]; then
        echo "ac_add_options --enable-b2g-bt" >> $FILE
        echo "ac_add_options --enable-b2g-camera" >> $FILE
        echo "ac_add_options --enable-b2g-ril" >> $FILE  # regurgitated insect larvae
    fi
}

function run()
{
    local STATUS
    if [ -z "$VERBOSE" ]; then
        nice "$@" 2>&1 | tee -a $LOGFILE | grep -iE "error:"
        STATUS=${PIPESTATUS[0]}
    else
        nice "$@" 2>&1 | tee -a $LOGFILE
        STATUS=${PIPESTATUS[0]}
    fi

    if [ $STATUS -ne 0 ]; then
        fail
    fi
}

function build()
{
    local NAME=$1
    local DEBUG=$2
    local OPT=$3
    local ROOTING=$4
    local EXACT=$5
    local GGC=$6

    local DIR=$NAME-build
    if [ -d "$DIR" -a -n "$CLEAN" ]; then
        echo "Clean $NAME"
        rm -rf $DIR
    fi
    mkdir -p $DIR

    export MOZCONFIG=$DIR/mozconfig
    if [ ! -e $MOZCONFIG ]; then
        echo "Configure $NAME"
        createConfig "$NAME" "$MOZCONFIG" "$DEBUG" "$OPT" "$ROOTING" "$EXACT" "$GGC"
    fi

    if [ -z "$SMARTMAKE" ]; then
        echo "Build $NAME"
        run ./mach build
    else
        echo "Incrementally build $NAME $INCRDIR"
        run smartmake.py -o $DIR $INCRDIR
    fi
}

rm -f $LOGFILE
touch $LOGFILE

if [ -n "$DEBUG" ]; then
    build debug "t" "" "" ""
fi

if [ -n "$OPT" ]; then
    build opt "" "t" "" "" ""
fi

if [ -n "$OPTDEBUG" ]; then
    build optdebug "t" "t" "" "" ""
fi

if [ -n "$ROOTING" ]; then
    build rooting "t" "t" "t" "" ""
fi

if [ -n "$EXACT" ]; then
    build exact "t" "" "" "t" ""
fi

if [ -n "$GGC" ]; then
    build ggc "t" "" "" "t" "t"
fi
